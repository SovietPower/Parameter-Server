// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_2eproto {
  static const uint32_t offsets[];
};
namespace ps {
class PBControl;
struct PBControlDefaultTypeInternal;
extern PBControlDefaultTypeInternal _PBControl_default_instance_;
class PBMeta;
struct PBMetaDefaultTypeInternal;
extern PBMetaDefaultTypeInternal _PBMeta_default_instance_;
class PBNode;
struct PBNodeDefaultTypeInternal;
extern PBNodeDefaultTypeInternal _PBNode_default_instance_;
}  // namespace ps
PROTOBUF_NAMESPACE_OPEN
template<> ::ps::PBControl* Arena::CreateMaybeMessage<::ps::PBControl>(Arena*);
template<> ::ps::PBMeta* Arena::CreateMaybeMessage<::ps::PBMeta>(Arena*);
template<> ::ps::PBNode* Arena::CreateMaybeMessage<::ps::PBNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ps {

// ===================================================================

class PBNode final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ps.PBNode) */ {
 public:
  inline PBNode() : PBNode(nullptr) {}
  ~PBNode() override;
  explicit PROTOBUF_CONSTEXPR PBNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBNode(const PBNode& from);
  PBNode(PBNode&& from) noexcept
    : PBNode() {
    *this = ::std::move(from);
  }

  inline PBNode& operator=(const PBNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBNode& operator=(PBNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PBNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBNode* internal_default_instance() {
    return reinterpret_cast<const PBNode*>(
               &_PBNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBNode& a, PBNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PBNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PBNode& from);
  void MergeFrom(const PBNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ps.PBNode";
  }
  protected:
  explicit PBNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 3,
    kRoleFieldNumber = 1,
    kIdFieldNumber = 2,
    kPortFieldNumber = 4,
    kIsRecoveredFieldNumber = 5,
    kCustomerIdFieldNumber = 10,
  };
  // optional string hostname = 3;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required int32 role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  int32_t role() const;
  void set_role(int32_t value);
  private:
  int32_t _internal_role() const;
  void _internal_set_role(int32_t value);
  public:

  // optional int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 port = 4;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // optional bool is_recovered = 5;
  bool has_is_recovered() const;
  private:
  bool _internal_has_is_recovered() const;
  public:
  void clear_is_recovered();
  bool is_recovered() const;
  void set_is_recovered(bool value);
  private:
  bool _internal_is_recovered() const;
  void _internal_set_is_recovered(bool value);
  public:

  // optional int32 customer_id = 10;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  int32_t customer_id() const;
  void set_customer_id(int32_t value);
  private:
  int32_t _internal_customer_id() const;
  void _internal_set_customer_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ps.PBNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
    int32_t role_;
    int32_t id_;
    int32_t port_;
    bool is_recovered_;
    int32_t customer_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class PBControl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ps.PBControl) */ {
 public:
  inline PBControl() : PBControl(nullptr) {}
  ~PBControl() override;
  explicit PROTOBUF_CONSTEXPR PBControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBControl(const PBControl& from);
  PBControl(PBControl&& from) noexcept
    : PBControl() {
    *this = ::std::move(from);
  }

  inline PBControl& operator=(const PBControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBControl& operator=(PBControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PBControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBControl* internal_default_instance() {
    return reinterpret_cast<const PBControl*>(
               &_PBControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PBControl& a, PBControl& b) {
    a.Swap(&b);
  }
  inline void Swap(PBControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBControl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PBControl& from);
  void MergeFrom(const PBControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ps.PBControl";
  }
  protected:
  explicit PBControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 2,
    kCmdFieldNumber = 1,
    kBarrierGroupFieldNumber = 3,
  };
  // repeated .ps.PBNode node = 2;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::ps::PBNode* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ps::PBNode >*
      mutable_node();
  private:
  const ::ps::PBNode& _internal_node(int index) const;
  ::ps::PBNode* _internal_add_node();
  public:
  const ::ps::PBNode& node(int index) const;
  ::ps::PBNode* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ps::PBNode >&
      node() const;

  // required int32 cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  int32_t cmd() const;
  void set_cmd(int32_t value);
  private:
  int32_t _internal_cmd() const;
  void _internal_set_cmd(int32_t value);
  public:

  // optional int32 barrier_group = 3;
  bool has_barrier_group() const;
  private:
  bool _internal_has_barrier_group() const;
  public:
  void clear_barrier_group();
  int32_t barrier_group() const;
  void set_barrier_group(int32_t value);
  private:
  int32_t _internal_barrier_group() const;
  void _internal_set_barrier_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ps.PBControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ps::PBNode > node_;
    int32_t cmd_;
    int32_t barrier_group_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class PBMeta final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ps.PBMeta) */ {
 public:
  inline PBMeta() : PBMeta(nullptr) {}
  ~PBMeta() override;
  explicit PROTOBUF_CONSTEXPR PBMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBMeta(const PBMeta& from);
  PBMeta(PBMeta&& from) noexcept
    : PBMeta() {
    *this = ::std::move(from);
  }

  inline PBMeta& operator=(const PBMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBMeta& operator=(PBMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PBMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBMeta* internal_default_instance() {
    return reinterpret_cast<const PBMeta*>(
               &_PBMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PBMeta& a, PBMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PBMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBMeta>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PBMeta& from);
  void MergeFrom(const PBMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ps.PBMeta";
  }
  protected:
  explicit PBMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 9,
    kBodyFieldNumber = 2,
    kControlFieldNumber = 3,
    kHeadFieldNumber = 1,
    kRequestFieldNumber = 4,
    kPushFieldNumber = 5,
    kPullFieldNumber = 12,
    kSimpleAppFieldNumber = 6,
    kAppIdFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kCustomerIdFieldNumber = 10,
    kDataSizeFieldNumber = 11,
    kMsgSignFieldNumber = 15,
    kPriorityFieldNumber = 13,
  };
  // repeated int32 data_type = 9 [packed = true];
  int data_type_size() const;
  private:
  int _internal_data_type_size() const;
  public:
  void clear_data_type();
  private:
  int32_t _internal_data_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data_type() const;
  void _internal_add_data_type(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data_type();
  public:
  int32_t data_type(int index) const;
  void set_data_type(int index, int32_t value);
  void add_data_type(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data_type();

  // optional bytes body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // optional .ps.PBControl control = 3;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::ps::PBControl& control() const;
  PROTOBUF_NODISCARD ::ps::PBControl* release_control();
  ::ps::PBControl* mutable_control();
  void set_allocated_control(::ps::PBControl* control);
  private:
  const ::ps::PBControl& _internal_control() const;
  ::ps::PBControl* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::ps::PBControl* control);
  ::ps::PBControl* unsafe_arena_release_control();

  // optional int32 head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  int32_t head() const;
  void set_head(int32_t value);
  private:
  int32_t _internal_head() const;
  void _internal_set_head(int32_t value);
  public:

  // optional bool request = 4 [default = false];
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  bool request() const;
  void set_request(bool value);
  private:
  bool _internal_request() const;
  void _internal_set_request(bool value);
  public:

  // optional bool push = 5;
  bool has_push() const;
  private:
  bool _internal_has_push() const;
  public:
  void clear_push();
  bool push() const;
  void set_push(bool value);
  private:
  bool _internal_push() const;
  void _internal_set_push(bool value);
  public:

  // optional bool pull = 12;
  bool has_pull() const;
  private:
  bool _internal_has_pull() const;
  public:
  void clear_pull();
  bool pull() const;
  void set_pull(bool value);
  private:
  bool _internal_pull() const;
  void _internal_set_pull(bool value);
  public:

  // optional bool simple_app = 6 [default = false];
  bool has_simple_app() const;
  private:
  bool _internal_has_simple_app() const;
  public:
  void clear_simple_app();
  bool simple_app() const;
  void set_simple_app(bool value);
  private:
  bool _internal_simple_app() const;
  void _internal_set_simple_app(bool value);
  public:

  // optional int32 app_id = 7;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  int32_t app_id() const;
  void set_app_id(int32_t value);
  private:
  int32_t _internal_app_id() const;
  void _internal_set_app_id(int32_t value);
  public:

  // optional int32 timestamp = 8;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int32_t timestamp() const;
  void set_timestamp(int32_t value);
  private:
  int32_t _internal_timestamp() const;
  void _internal_set_timestamp(int32_t value);
  public:

  // optional int32 customer_id = 10;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  int32_t customer_id() const;
  void set_customer_id(int32_t value);
  private:
  int32_t _internal_customer_id() const;
  void _internal_set_customer_id(int32_t value);
  public:

  // optional int32 data_size = 11;
  bool has_data_size() const;
  private:
  bool _internal_has_data_size() const;
  public:
  void clear_data_size();
  int32_t data_size() const;
  void set_data_size(int32_t value);
  private:
  int32_t _internal_data_size() const;
  void _internal_set_data_size(int32_t value);
  public:

  // optional uint64 msg_sign = 15;
  bool has_msg_sign() const;
  private:
  bool _internal_has_msg_sign() const;
  public:
  void clear_msg_sign();
  uint64_t msg_sign() const;
  void set_msg_sign(uint64_t value);
  private:
  uint64_t _internal_msg_sign() const;
  void _internal_set_msg_sign(uint64_t value);
  public:

  // optional int32 priority = 13 [default = 0];
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ps.PBMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_type_;
    mutable std::atomic<int> _data_type_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::ps::PBControl* control_;
    int32_t head_;
    bool request_;
    bool push_;
    bool pull_;
    bool simple_app_;
    int32_t app_id_;
    int32_t timestamp_;
    int32_t customer_id_;
    int32_t data_size_;
    uint64_t msg_sign_;
    int32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_meta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBNode

// required int32 role = 1;
inline bool PBNode::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBNode::has_role() const {
  return _internal_has_role();
}
inline void PBNode::clear_role() {
  _impl_.role_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PBNode::_internal_role() const {
  return _impl_.role_;
}
inline int32_t PBNode::role() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.role)
  return _internal_role();
}
inline void PBNode::_internal_set_role(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.role_ = value;
}
inline void PBNode::set_role(int32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:ps.PBNode.role)
}

// optional int32 id = 2;
inline bool PBNode::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBNode::has_id() const {
  return _internal_has_id();
}
inline void PBNode::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PBNode::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PBNode::id() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.id)
  return _internal_id();
}
inline void PBNode::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void PBNode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ps.PBNode.id)
}

// optional string hostname = 3;
inline bool PBNode::_internal_has_hostname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBNode::has_hostname() const {
  return _internal_has_hostname();
}
inline void PBNode::clear_hostname() {
  _impl_.hostname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBNode::hostname() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBNode::set_hostname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ps.PBNode.hostname)
}
inline std::string* PBNode::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:ps.PBNode.hostname)
  return _s;
}
inline const std::string& PBNode::_internal_hostname() const {
  return _impl_.hostname_.Get();
}
inline void PBNode::_internal_set_hostname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* PBNode::_internal_mutable_hostname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* PBNode::release_hostname() {
  // @@protoc_insertion_point(field_release:ps.PBNode.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hostname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBNode::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hostname_.IsDefault()) {
    _impl_.hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ps.PBNode.hostname)
}

// optional int32 port = 4;
inline bool PBNode::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBNode::has_port() const {
  return _internal_has_port();
}
inline void PBNode::clear_port() {
  _impl_.port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t PBNode::_internal_port() const {
  return _impl_.port_;
}
inline int32_t PBNode::port() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.port)
  return _internal_port();
}
inline void PBNode::_internal_set_port(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.port_ = value;
}
inline void PBNode::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ps.PBNode.port)
}

// optional bool is_recovered = 5;
inline bool PBNode::_internal_has_is_recovered() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PBNode::has_is_recovered() const {
  return _internal_has_is_recovered();
}
inline void PBNode::clear_is_recovered() {
  _impl_.is_recovered_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool PBNode::_internal_is_recovered() const {
  return _impl_.is_recovered_;
}
inline bool PBNode::is_recovered() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.is_recovered)
  return _internal_is_recovered();
}
inline void PBNode::_internal_set_is_recovered(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_recovered_ = value;
}
inline void PBNode::set_is_recovered(bool value) {
  _internal_set_is_recovered(value);
  // @@protoc_insertion_point(field_set:ps.PBNode.is_recovered)
}

// optional int32 customer_id = 10;
inline bool PBNode::_internal_has_customer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PBNode::has_customer_id() const {
  return _internal_has_customer_id();
}
inline void PBNode::clear_customer_id() {
  _impl_.customer_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t PBNode::_internal_customer_id() const {
  return _impl_.customer_id_;
}
inline int32_t PBNode::customer_id() const {
  // @@protoc_insertion_point(field_get:ps.PBNode.customer_id)
  return _internal_customer_id();
}
inline void PBNode::_internal_set_customer_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.customer_id_ = value;
}
inline void PBNode::set_customer_id(int32_t value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:ps.PBNode.customer_id)
}

// -------------------------------------------------------------------

// PBControl

// required int32 cmd = 1;
inline bool PBControl::_internal_has_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBControl::has_cmd() const {
  return _internal_has_cmd();
}
inline void PBControl::clear_cmd() {
  _impl_.cmd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t PBControl::_internal_cmd() const {
  return _impl_.cmd_;
}
inline int32_t PBControl::cmd() const {
  // @@protoc_insertion_point(field_get:ps.PBControl.cmd)
  return _internal_cmd();
}
inline void PBControl::_internal_set_cmd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cmd_ = value;
}
inline void PBControl::set_cmd(int32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:ps.PBControl.cmd)
}

// repeated .ps.PBNode node = 2;
inline int PBControl::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int PBControl::node_size() const {
  return _internal_node_size();
}
inline void PBControl::clear_node() {
  _impl_.node_.Clear();
}
inline ::ps::PBNode* PBControl::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:ps.PBControl.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ps::PBNode >*
PBControl::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:ps.PBControl.node)
  return &_impl_.node_;
}
inline const ::ps::PBNode& PBControl::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::ps::PBNode& PBControl::node(int index) const {
  // @@protoc_insertion_point(field_get:ps.PBControl.node)
  return _internal_node(index);
}
inline ::ps::PBNode* PBControl::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::ps::PBNode* PBControl::add_node() {
  ::ps::PBNode* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:ps.PBControl.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ps::PBNode >&
PBControl::node() const {
  // @@protoc_insertion_point(field_list:ps.PBControl.node)
  return _impl_.node_;
}

// optional int32 barrier_group = 3;
inline bool PBControl::_internal_has_barrier_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PBControl::has_barrier_group() const {
  return _internal_has_barrier_group();
}
inline void PBControl::clear_barrier_group() {
  _impl_.barrier_group_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PBControl::_internal_barrier_group() const {
  return _impl_.barrier_group_;
}
inline int32_t PBControl::barrier_group() const {
  // @@protoc_insertion_point(field_get:ps.PBControl.barrier_group)
  return _internal_barrier_group();
}
inline void PBControl::_internal_set_barrier_group(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.barrier_group_ = value;
}
inline void PBControl::set_barrier_group(int32_t value) {
  _internal_set_barrier_group(value);
  // @@protoc_insertion_point(field_set:ps.PBControl.barrier_group)
}

// -------------------------------------------------------------------

// PBMeta

// optional int32 head = 1;
inline bool PBMeta::_internal_has_head() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PBMeta::has_head() const {
  return _internal_has_head();
}
inline void PBMeta::clear_head() {
  _impl_.head_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PBMeta::_internal_head() const {
  return _impl_.head_;
}
inline int32_t PBMeta::head() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.head)
  return _internal_head();
}
inline void PBMeta::_internal_set_head(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.head_ = value;
}
inline void PBMeta::set_head(int32_t value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.head)
}

// optional bytes body = 2;
inline bool PBMeta::_internal_has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PBMeta::has_body() const {
  return _internal_has_body();
}
inline void PBMeta::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PBMeta::body() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBMeta::set_body(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ps.PBMeta.body)
}
inline std::string* PBMeta::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:ps.PBMeta.body)
  return _s;
}
inline const std::string& PBMeta::_internal_body() const {
  return _impl_.body_.Get();
}
inline void PBMeta::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* PBMeta::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* PBMeta::release_body() {
  // @@protoc_insertion_point(field_release:ps.PBMeta.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.body_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PBMeta::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ps.PBMeta.body)
}

// optional .ps.PBControl control = 3;
inline bool PBMeta::_internal_has_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_ != nullptr);
  return value;
}
inline bool PBMeta::has_control() const {
  return _internal_has_control();
}
inline void PBMeta::clear_control() {
  if (_impl_.control_ != nullptr) _impl_.control_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ps::PBControl& PBMeta::_internal_control() const {
  const ::ps::PBControl* p = _impl_.control_;
  return p != nullptr ? *p : reinterpret_cast<const ::ps::PBControl&>(
      ::ps::_PBControl_default_instance_);
}
inline const ::ps::PBControl& PBMeta::control() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.control)
  return _internal_control();
}
inline void PBMeta::unsafe_arena_set_allocated_control(
    ::ps::PBControl* control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.control_);
  }
  _impl_.control_ = control;
  if (control) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ps.PBMeta.control)
}
inline ::ps::PBControl* PBMeta::release_control() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ps::PBControl* temp = _impl_.control_;
  _impl_.control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ps::PBControl* PBMeta::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:ps.PBMeta.control)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ps::PBControl* temp = _impl_.control_;
  _impl_.control_ = nullptr;
  return temp;
}
inline ::ps::PBControl* PBMeta::_internal_mutable_control() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.control_ == nullptr) {
    auto* p = CreateMaybeMessage<::ps::PBControl>(GetArenaForAllocation());
    _impl_.control_ = p;
  }
  return _impl_.control_;
}
inline ::ps::PBControl* PBMeta::mutable_control() {
  ::ps::PBControl* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:ps.PBMeta.control)
  return _msg;
}
inline void PBMeta::set_allocated_control(::ps::PBControl* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.control_ = control;
  // @@protoc_insertion_point(field_set_allocated:ps.PBMeta.control)
}

// optional bool request = 4 [default = false];
inline bool PBMeta::_internal_has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PBMeta::has_request() const {
  return _internal_has_request();
}
inline void PBMeta::clear_request() {
  _impl_.request_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PBMeta::_internal_request() const {
  return _impl_.request_;
}
inline bool PBMeta::request() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.request)
  return _internal_request();
}
inline void PBMeta::_internal_set_request(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.request_ = value;
}
inline void PBMeta::set_request(bool value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.request)
}

// optional int32 app_id = 7;
inline bool PBMeta::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PBMeta::has_app_id() const {
  return _internal_has_app_id();
}
inline void PBMeta::clear_app_id() {
  _impl_.app_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t PBMeta::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int32_t PBMeta::app_id() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.app_id)
  return _internal_app_id();
}
inline void PBMeta::_internal_set_app_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.app_id_ = value;
}
inline void PBMeta::set_app_id(int32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.app_id)
}

// optional int32 timestamp = 8;
inline bool PBMeta::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PBMeta::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PBMeta::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t PBMeta::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int32_t PBMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.timestamp)
  return _internal_timestamp();
}
inline void PBMeta::_internal_set_timestamp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.timestamp_ = value;
}
inline void PBMeta::set_timestamp(int32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.timestamp)
}

// repeated int32 data_type = 9 [packed = true];
inline int PBMeta::_internal_data_type_size() const {
  return _impl_.data_type_.size();
}
inline int PBMeta::data_type_size() const {
  return _internal_data_type_size();
}
inline void PBMeta::clear_data_type() {
  _impl_.data_type_.Clear();
}
inline int32_t PBMeta::_internal_data_type(int index) const {
  return _impl_.data_type_.Get(index);
}
inline int32_t PBMeta::data_type(int index) const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.data_type)
  return _internal_data_type(index);
}
inline void PBMeta::set_data_type(int index, int32_t value) {
  _impl_.data_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.data_type)
}
inline void PBMeta::_internal_add_data_type(int32_t value) {
  _impl_.data_type_.Add(value);
}
inline void PBMeta::add_data_type(int32_t value) {
  _internal_add_data_type(value);
  // @@protoc_insertion_point(field_add:ps.PBMeta.data_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PBMeta::_internal_data_type() const {
  return _impl_.data_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
PBMeta::data_type() const {
  // @@protoc_insertion_point(field_list:ps.PBMeta.data_type)
  return _internal_data_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PBMeta::_internal_mutable_data_type() {
  return &_impl_.data_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
PBMeta::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable_list:ps.PBMeta.data_type)
  return _internal_mutable_data_type();
}

// optional int32 customer_id = 10;
inline bool PBMeta::_internal_has_customer_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PBMeta::has_customer_id() const {
  return _internal_has_customer_id();
}
inline void PBMeta::clear_customer_id() {
  _impl_.customer_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t PBMeta::_internal_customer_id() const {
  return _impl_.customer_id_;
}
inline int32_t PBMeta::customer_id() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.customer_id)
  return _internal_customer_id();
}
inline void PBMeta::_internal_set_customer_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.customer_id_ = value;
}
inline void PBMeta::set_customer_id(int32_t value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.customer_id)
}

// optional bool push = 5;
inline bool PBMeta::_internal_has_push() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PBMeta::has_push() const {
  return _internal_has_push();
}
inline void PBMeta::clear_push() {
  _impl_.push_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool PBMeta::_internal_push() const {
  return _impl_.push_;
}
inline bool PBMeta::push() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.push)
  return _internal_push();
}
inline void PBMeta::_internal_set_push(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.push_ = value;
}
inline void PBMeta::set_push(bool value) {
  _internal_set_push(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.push)
}

// optional bool pull = 12;
inline bool PBMeta::_internal_has_pull() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PBMeta::has_pull() const {
  return _internal_has_pull();
}
inline void PBMeta::clear_pull() {
  _impl_.pull_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool PBMeta::_internal_pull() const {
  return _impl_.pull_;
}
inline bool PBMeta::pull() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.pull)
  return _internal_pull();
}
inline void PBMeta::_internal_set_pull(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pull_ = value;
}
inline void PBMeta::set_pull(bool value) {
  _internal_set_pull(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.pull)
}

// optional bool simple_app = 6 [default = false];
inline bool PBMeta::_internal_has_simple_app() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PBMeta::has_simple_app() const {
  return _internal_has_simple_app();
}
inline void PBMeta::clear_simple_app() {
  _impl_.simple_app_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool PBMeta::_internal_simple_app() const {
  return _impl_.simple_app_;
}
inline bool PBMeta::simple_app() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.simple_app)
  return _internal_simple_app();
}
inline void PBMeta::_internal_set_simple_app(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.simple_app_ = value;
}
inline void PBMeta::set_simple_app(bool value) {
  _internal_set_simple_app(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.simple_app)
}

// optional int32 data_size = 11;
inline bool PBMeta::_internal_has_data_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PBMeta::has_data_size() const {
  return _internal_has_data_size();
}
inline void PBMeta::clear_data_size() {
  _impl_.data_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t PBMeta::_internal_data_size() const {
  return _impl_.data_size_;
}
inline int32_t PBMeta::data_size() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.data_size)
  return _internal_data_size();
}
inline void PBMeta::_internal_set_data_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.data_size_ = value;
}
inline void PBMeta::set_data_size(int32_t value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.data_size)
}

// optional int32 priority = 13 [default = 0];
inline bool PBMeta::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PBMeta::has_priority() const {
  return _internal_has_priority();
}
inline void PBMeta::clear_priority() {
  _impl_.priority_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t PBMeta::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t PBMeta::priority() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.priority)
  return _internal_priority();
}
inline void PBMeta::_internal_set_priority(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.priority_ = value;
}
inline void PBMeta::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.priority)
}

// optional uint64 msg_sign = 15;
inline bool PBMeta::_internal_has_msg_sign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PBMeta::has_msg_sign() const {
  return _internal_has_msg_sign();
}
inline void PBMeta::clear_msg_sign() {
  _impl_.msg_sign_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t PBMeta::_internal_msg_sign() const {
  return _impl_.msg_sign_;
}
inline uint64_t PBMeta::msg_sign() const {
  // @@protoc_insertion_point(field_get:ps.PBMeta.msg_sign)
  return _internal_msg_sign();
}
inline void PBMeta::_internal_set_msg_sign(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.msg_sign_ = value;
}
inline void PBMeta::set_msg_sign(uint64_t value) {
  _internal_set_msg_sign(value);
  // @@protoc_insertion_point(field_set:ps.PBMeta.msg_sign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ps

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
