// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ps {
PROTOBUF_CONSTEXPR PBNode::PBNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.is_recovered_)*/false
  , /*decltype(_impl_.customer_id_)*/0} {}
struct PBNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBNodeDefaultTypeInternal() {}
  union {
    PBNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBNodeDefaultTypeInternal _PBNode_default_instance_;
PROTOBUF_CONSTEXPR PBControl::PBControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.cmd_)*/0
  , /*decltype(_impl_.barrier_group_)*/0} {}
struct PBControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBControlDefaultTypeInternal() {}
  union {
    PBControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBControlDefaultTypeInternal _PBControl_default_instance_;
PROTOBUF_CONSTEXPR PBMeta::PBMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_type_)*/{}
  , /*decltype(_impl_._data_type_cached_byte_size_)*/{0}
  , /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.control_)*/nullptr
  , /*decltype(_impl_.head_)*/0
  , /*decltype(_impl_.request_)*/false
  , /*decltype(_impl_.push_)*/false
  , /*decltype(_impl_.pull_)*/false
  , /*decltype(_impl_.simple_app_)*/false
  , /*decltype(_impl_.app_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.customer_id_)*/0
  , /*decltype(_impl_.data_size_)*/0
  , /*decltype(_impl_.msg_sign_)*/uint64_t{0u}
  , /*decltype(_impl_.priority_)*/0} {}
struct PBMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PBMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PBMetaDefaultTypeInternal() {}
  union {
    PBMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PBMetaDefaultTypeInternal _PBMeta_default_instance_;
}  // namespace ps
namespace ps {

// ===================================================================

class PBNode::_Internal {
 public:
  using HasBits = decltype(std::declval<PBNode>()._impl_._has_bits_);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_recovered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_customer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PBNode::PBNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ps.PBNode)
}
PBNode::PBNode(const PBNode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PBNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.is_recovered_){}
    , decltype(_impl_.customer_id_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.customer_id_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.customer_id_));
  // @@protoc_insertion_point(copy_constructor:ps.PBNode)
}

inline void PBNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.is_recovered_){false}
    , decltype(_impl_.customer_id_){0}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBNode::~PBNode() {
  // @@protoc_insertion_point(destructor:ps.PBNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
}

void PBNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.hostname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.customer_id_) -
        reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.customer_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PBNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_role(&has_bits);
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_recovered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_recovered(&has_bits);
          _impl_.is_recovered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 customer_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_customer_id(&has_bits);
          _impl_.customer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ps.PBNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_role(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional string hostname = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // optional bool is_recovered = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_recovered(), target);
  }

  // optional int32 customer_id = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_customer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ps.PBNode)
  return target;
}

size_t PBNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBNode)
  size_t total_size = 0;

  // required int32 role = 1;
  if (_internal_has_role()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_role());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hostname = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional int32 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

    // optional bool is_recovered = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 customer_id = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_customer_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBNode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PBNode*>(
      &from));
}

void PBNode::MergeFrom(const PBNode& from) {
  PBNode* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ps.PBNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_recovered_ = from._impl_.is_recovered_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.customer_id_ = from._impl_.customer_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PBNode::CopyFrom(const PBNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PBNode::InternalSwap(PBNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBNode, _impl_.customer_id_)
      + sizeof(PBNode::_impl_.customer_id_)
      - PROTOBUF_FIELD_OFFSET(PBNode, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

std::string PBNode::GetTypeName() const {
  return "ps.PBNode";
}


// ===================================================================

class PBControl::_Internal {
 public:
  using HasBits = decltype(std::declval<PBControl>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_barrier_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PBControl::PBControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ps.PBControl)
}
PBControl::PBControl(const PBControl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PBControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.barrier_group_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_, &from._impl_.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.barrier_group_) -
    reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.barrier_group_));
  // @@protoc_insertion_point(copy_constructor:ps.PBControl)
}

inline void PBControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.node_){arena}
    , decltype(_impl_.cmd_){0}
    , decltype(_impl_.barrier_group_){0}
  };
}

PBControl::~PBControl() {
  // @@protoc_insertion_point(destructor:ps.PBControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
}

void PBControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.barrier_group_) -
        reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.barrier_group_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PBControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cmd(&has_bits);
          _impl_.cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ps.PBNode node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 barrier_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_barrier_group(&has_bits);
          _impl_.barrier_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ps.PBControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
  }

  // repeated .ps.PBNode node = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 barrier_group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_barrier_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ps.PBControl)
  return target;
}

size_t PBControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBControl)
  size_t total_size = 0;

  // required int32 cmd = 1;
  if (_internal_has_cmd()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmd());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ps.PBNode node = 2;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 barrier_group = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_barrier_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBControl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PBControl*>(
      &from));
}

void PBControl::MergeFrom(const PBControl& from) {
  PBControl* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ps.PBControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cmd_ = from._impl_.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.barrier_group_ = from._impl_.barrier_group_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PBControl::CopyFrom(const PBControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBControl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.node_))
    return false;
  return true;
}

void PBControl::InternalSwap(PBControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBControl, _impl_.barrier_group_)
      + sizeof(PBControl::_impl_.barrier_group_)
      - PROTOBUF_FIELD_OFFSET(PBControl, _impl_.cmd_)>(
          reinterpret_cast<char*>(&_impl_.cmd_),
          reinterpret_cast<char*>(&other->_impl_.cmd_));
}

std::string PBControl::GetTypeName() const {
  return "ps.PBControl";
}


// ===================================================================

class PBMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PBMeta>()._impl_._has_bits_);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ps::PBControl& control(const PBMeta* msg);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_customer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_push(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pull(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_simple_app(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_msg_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::ps::PBControl&
PBMeta::_Internal::control(const PBMeta* msg) {
  return *msg->_impl_.control_;
}
PBMeta::PBMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ps.PBMeta)
}
PBMeta::PBMeta(const PBMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PBMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_type_){from._impl_.data_type_}
    , /*decltype(_impl_._data_type_cached_byte_size_)*/{0}
    , decltype(_impl_.body_){}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.head_){}
    , decltype(_impl_.request_){}
    , decltype(_impl_.push_){}
    , decltype(_impl_.pull_){}
    , decltype(_impl_.simple_app_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.customer_id_){}
    , decltype(_impl_.data_size_){}
    , decltype(_impl_.msg_sign_){}
    , decltype(_impl_.priority_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_control()) {
    _this->_impl_.control_ = new ::ps::PBControl(*from._impl_.control_);
  }
  ::memcpy(&_impl_.head_, &from._impl_.head_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.head_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:ps.PBMeta)
}

inline void PBMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_type_){arena}
    , /*decltype(_impl_._data_type_cached_byte_size_)*/{0}
    , decltype(_impl_.body_){}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.head_){0}
    , decltype(_impl_.request_){false}
    , decltype(_impl_.push_){false}
    , decltype(_impl_.pull_){false}
    , decltype(_impl_.simple_app_){false}
    , decltype(_impl_.app_id_){0}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.customer_id_){0}
    , decltype(_impl_.data_size_){0}
    , decltype(_impl_.msg_sign_){uint64_t{0u}}
    , decltype(_impl_.priority_){0}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBMeta::~PBMeta() {
  // @@protoc_insertion_point(destructor:ps.PBMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PBMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_type_.~RepeatedField();
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.control_;
}

void PBMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PBMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:ps.PBMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.control_ != nullptr);
      _impl_.control_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.head_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.app_id_) -
        reinterpret_cast<char*>(&_impl_.head_)) + sizeof(_impl_.app_id_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PBMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_head(&has_bits);
          _impl_.head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ps.PBControl control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool request = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_request(&has_bits);
          _impl_.request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool push = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_push(&has_bits);
          _impl_.push_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool simple_app = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_simple_app(&has_bits);
          _impl_.simple_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_app_id(&has_bits);
          _impl_.app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data_type = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_data_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 customer_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_customer_id(&has_bits);
          _impl_.customer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_data_size(&has_bits);
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pull = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_pull(&has_bits);
          _impl_.pull_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 priority = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_priority(&has_bits);
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 msg_sign = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_msg_sign(&has_bits);
          _impl_.msg_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ps.PBMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 head = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_head(), target);
  }

  // optional bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional .ps.PBControl control = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // optional bool request = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_request(), target);
  }

  // optional bool push = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_push(), target);
  }

  // optional bool simple_app = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_simple_app(), target);
  }

  // optional int32 app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_app_id(), target);
  }

  // optional int32 timestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_timestamp(), target);
  }

  // repeated int32 data_type = 9 [packed = true];
  {
    int byte_size = _impl_._data_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_data_type(), byte_size, target);
    }
  }

  // optional int32 customer_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_customer_id(), target);
  }

  // optional int32 data_size = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_data_size(), target);
  }

  // optional bool pull = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_pull(), target);
  }

  // optional int32 priority = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_priority(), target);
  }

  // optional uint64 msg_sign = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_msg_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ps.PBMeta)
  return target;
}

size_t PBMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ps.PBMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data_type = 9 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_type_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional .ps.PBControl control = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_);
    }

    // optional int32 head = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head());
    }

    // optional bool request = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool push = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pull = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool simple_app = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 app_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_app_id());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 timestamp = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 customer_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_customer_id());
    }

    // optional int32 data_size = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_size());
    }

    // optional uint64 msg_sign = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_msg_sign());
    }

    // optional int32 priority = 13 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMeta::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PBMeta*>(
      &from));
}

void PBMeta::MergeFrom(const PBMeta& from) {
  PBMeta* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ps.PBMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_type_.MergeFrom(from._impl_.data_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_control()->::ps::PBControl::MergeFrom(
          from._internal_control());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.head_ = from._impl_.head_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.request_ = from._impl_.request_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.push_ = from._impl_.push_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pull_ = from._impl_.pull_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.simple_app_ = from._impl_.simple_app_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.app_id_ = from._impl_.app_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.customer_id_ = from._impl_.customer_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.data_size_ = from._impl_.data_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.msg_sign_ = from._impl_.msg_sign_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.priority_ = from._impl_.priority_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PBMeta::CopyFrom(const PBMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ps.PBMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMeta::IsInitialized() const {
  if (_internal_has_control()) {
    if (!_impl_.control_->IsInitialized()) return false;
  }
  return true;
}

void PBMeta::InternalSwap(PBMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_type_.InternalSwap(&other->_impl_.data_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PBMeta, _impl_.priority_)
      + sizeof(PBMeta::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(PBMeta, _impl_.control_)>(
          reinterpret_cast<char*>(&_impl_.control_),
          reinterpret_cast<char*>(&other->_impl_.control_));
}

std::string PBMeta::GetTypeName() const {
  return "ps.PBMeta";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ps
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ps::PBNode*
Arena::CreateMaybeMessage< ::ps::PBNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ps::PBNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ps::PBControl*
Arena::CreateMaybeMessage< ::ps::PBControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ps::PBControl >(arena);
}
template<> PROTOBUF_NOINLINE ::ps::PBMeta*
Arena::CreateMaybeMessage< ::ps::PBMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ps::PBMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
